<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <context:component-scan base-package="top.ywlog"/>

    <!-- 属性方式注入 -->
    <!-- 注意id命名，开头两个字母要么全部大写，要么全部小写 -->
    <bean id="car1" class="top.ywlog.bean.Car">
        <property name="brand" value="红旗"/>
        <property name="color" value="黑色"/>
        <property name="maxSpeed" value="200"/>
        <property name="boss">
            <!-- 注入null值 -->
            <null/>
        </property>
    </bean>

    <!-- 构造方法注入 可指定索引和参数类型 -->
    <bean id="car2" class="top.ywlog.bean.Car">
        <!--        <constructor-arg value="红旗" type="java.lang.String"/>-->
        <!--        <constructor-arg value="黑色" type="java.lang.String"/>-->
        <!--        <constructor-arg value="200" type="int"/>-->

        <!--        <constructor-arg index="0" value="红旗"/>-->
        <!--        <constructor-arg index="1" value="黑色"/>-->
        <!--        <constructor-arg index="2" value="200"/>-->

        <constructor-arg index="0" type="java.lang.String" value="红旗"/>
        <constructor-arg index="1" type="java.lang.String" value="黑色"/>
        <constructor-arg index="2" type="int" value="200"/>
        <constructor-arg index="3" ref="boss"/>
    </bean>

    <!-- 父bean，可以简化配置信息 -->
    <bean id="abstractBoss" class="top.ywlog.bean.Boss">
        <property name="name" value="BOSS"/>
    </bean>

    <bean id="boss" class="top.ywlog.bean.Boss" parent="abstractBoss">
        <!--        <property name="name" value="large boss"/>-->
        <!-- 无需指定参数类型 -->
        <property name="car" ref="car1"/>
    </bean>

    <!-- 循环依赖问题 两个bean互相依赖，且都使用构造器方式注入，可以修改我set方式注入解除 -->
    <!--    <bean id="car3" class="top.ywlog.bean.Car">-->
    <!--        <constructor-arg index="0" type="java.lang.String" value="红旗"/>-->
    <!--        <constructor-arg index="1" type="java.lang.String" value="黑色"/>-->
    <!--        <constructor-arg index="2" type="int" value="200"/>-->
    <!--        <constructor-arg index="3" type="top.ywlog.bean.Boss" ref="boss2"/>-->
    <!--    </bean>-->
    <!--    <bean id="boss2" class="top.ywlog.bean.Boss">-->
    <!--        <constructor-arg index="0" value="large boss"/>-->
    <!--        <constructor-arg index="1" ref="car3"/>-->
    <!--    </bean>-->

    <!-- 内部bean注入 -->
    <bean id="boss3" parent="abstractBoss">
        <!--        <property name="name" value="BOSS"/>-->
        <property name="car">
            <bean class="top.ywlog.bean.Car">
                <property name="brand" value="红旗"/>
                <property name="color" value="黑色"/>
                <property name="maxSpeed" value="200"/>
            </bean>
        </property>
    </bean>

    <!-- 级联操作,但是在Boss类定义car时必须new Car() -->
    <bean id="boss4" parent="abstractBoss">
        <!--        <property name="name" value="BOSS"/>-->
        <property name="car.brand" value="红旗"/>
        <property name="car.color" value="红色"/>
        <property name="car.maxSpeed" value="200"/>
    </bean>

    <!-- 工厂方法注入 -->
    <bean id="factory" class="top.ywlog.factory.CarFactory"/>
    <bean id="car4" factory-bean="factory" factory-method="createCar"/>

    <!-- 静态工厂注入 -->
    <bean id="car5" class="top.ywlog.factory.CarStaticFactory" factory-method="createCar"/>

    <!-- 集合类型属性注入 -->
    <!-- list类型属性  -->
    <bean id="boss5" parent="abstractBoss">
        <!--        <property name="name" value="BOSS"/>-->
        <property name="favorites">
            <list>
                <value>Sport</value>
                <value>Run</value>
                <value>swim</value>
            </list>
        </property>
    </bean>
    <!-- set类型属性  set和list可以相互替换 -->
    <bean id="boss6" parent="abstractBoss">
        <!--        <property name="name" value="BOSS"/>-->
        <property name="girlFriends">
            <set>
                <value>Lucy</value>
                <value>Anny</value>
            </set>
        </property>
    </bean>
    <!-- map类型属性 -->
    <bean id="boss7" parent="abstractBoss">
        <!--        <property name="name" value="BOSS"/>-->
        <property name="cars">
            <map>
                <entry key="1" value-ref="car1"/>
                <entry key="2" value-ref="car1"/>
                <entry key="3" value-ref="car1"/>
            </map>
        </property>
    </bean>
    <!-- properties类型属性 -->
    <bean id="boss8" parent="abstractBoss">
        <!--        <property name="name" value="BOSS"/>-->
        <property name="mails">
            <props>
                <prop key="jobMail">job@mail</prop>
                <prop key="familyMail">family@mail</prop>
            </props>
        </property>
    </bean>

    <!-- 采用 P命名空间简化配置信息 -->
    <bean id="car6" class="top.ywlog.bean.Car"
          p:brand="法拉利"
          p:color="红色"
          p:maxSpeed="200"
          p:boss-ref="boss5"
    />

    <!-- prototype的Car -->
    <bean id="car7" class="top.ywlog.bean.Car" scope="prototype"
          p:brand="奔驰"
          p:color="黑色"
          p:maxSpeed="250"
    />
    <!-- lookup方法注入 -->
    <bean id="boss10" parent="abstractBoss">
        <lookup-method name="getCar" bean="car7"/>
    </bean>

    <!-- bean类实现BeanFactoryAware接口通过BeanFactory修改getCar()方法实现 -->
    <bean id="boss9" class="top.ywlog.bean.Boss2"
          p:car-ref="car7"
    />


</beans>